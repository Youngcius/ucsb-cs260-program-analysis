test:&() -> int

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _t10:int, _t11:int, _t2:int, _t3:int, _t4:&&int, _t5:&int, _t6:int, _t7:int, _t8:&int, _t9:&int, id0:&&int, id1:int, id2:&int, id3:&&int, id4:int
bb1:
  id1 = $copy _lo1
  id2 = $alloc 1 [_alloc2]
  _t8 = $load id3
  id2 = $copy _t8
  id4 = $copy 5
  _t9 = $addrof id1
  _t10 = $load _t9
  _t11 = $arith div _t10 1
  $ret _t11

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

entry:
  _t2 = $load id2
  id1 = $copy _t2
  _t3 = $load id2
  id4 = $copy _t3
  id0 = $alloc 1 [_alloc1]
  _t4 = $addrof id2
  _t5 = $load _t4
  _t6 = $cmp eq _t5 id2
  _t7 = $arith sub 0 _t6
  $branch _t7 bb2 bb3
}
