f1:&() -> int
f2:&(int, int) -> int
test:&(int, int) -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test(p:int, q:int) -> int {
let _lo1:int, _lo2:int, _lo3:int, _lo4:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t19:int, _t20:int, _t21:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int
bb1:
  _lo1 = $copy _t13
  _t14 = $cmp neq _lo1 0
  $branch _t14 bb3 bb2

bb10:
  _t16 = $cmp eq _lo1 _lo2
  _t17 = $cmp gt _t16 _lo4
  p = $copy _t17
  _t18 = $arith sub 0 p
  _t19 = $cmp neq 10 10
  _t20 = $cmp eq _t19 2
  _t21 = $cmp neq _t18 _t20
  $ret _t21

bb11:
  _lo4 = $copy 0
  $jump bb10

bb12:
  _lo4 = $copy 1
  $jump bb10

bb2:
  $branch q bb5 bb6

bb3:
  _lo1 = $copy p
  $jump bb2

bb4:
  _t15 = $arith sub 0 10
  $branch _t15 bb8 bb9

bb5:
  _lo2 = $copy 0
  $jump bb4

bb6:
  _lo2 = $copy 1
  $jump bb4

bb7:
  $branch _lo3 bb11 bb12

bb8:
  _lo3 = $copy 0
  $jump bb7

bb9:
  _lo3 = $copy 1
  $jump bb7

entry:
  _t5 = $arith sub 0 3
  id0 = $copy _t5
  _t6 = $arith sub 0 6
  _t7 = $arith sub 0 _t6
  id1 = $copy _t7
  _t8 = $arith sub 0 6
  id2 = $copy _t8
  id0 = $copy id1
  _t9 = $call_ext e1()
  _t10 = $cmp lte _t9 7
  _t11 = $arith div id0 _t10
  _t12 = $cmp gt _t11 id2
  id2 = $copy _t12
  _t13 = $call_dir f1() then bb1
}
