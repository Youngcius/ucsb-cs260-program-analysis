f1:&(int) -> int
f2:&(int, &int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(&int) -> int

fn f1(p:int) -> int {
entry:
  $ret 0
}

fn f2(p:int, q:&int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _t1:&int, _t10:&int, _t11:int, _t12:int, _t13:int, _t2:&&(int) -> int, _t3:&(int) -> int, _t4:&int, _t5:int, _t6:&int, _t7:&&int, _t8:&int, _t9:int, id0:&int, id1:&int, id2:&int, id3:&int, id4:int, id5:int, id6:&int, id7:&(int) -> int, id8:&&&(int) -> int, id9:&&&(int) -> int
bb1:
  _t6 = $addrof id5
  $ret _t13

entry:
  id7 = $copy _t3
  _t5 = $arith sub 0 9
  _t4 = $gep id0 _t5
  _t7 = $addrof id6
  _t8 = $load _t7
  _t11 = $load _t10  // t11 -> Top, t4 -> Bottom
  $store _t4 _t11
  _t12 = $arith sub 0 1
  $jump bb1
}
