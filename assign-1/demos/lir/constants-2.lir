f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _t2:int, _t3:int, id0:int, id1:int
bb1:
  id0 = $copy _lo1
  $jump bb4

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

bb4:
  $branch 4 bb5 bb6

bb5:
  id1 = $copy 3
  $jump bb4

bb6:
  $call_dir f1() then bb7

bb7:
  _t3 = $call_dir f1() then bb8

bb8:
  $ret _t3

entry:
  id0 = $copy 0
  id1 = $copy 0
  _t2 = $arith sub 0 2
  $branch _t2 bb2 bb3
}
