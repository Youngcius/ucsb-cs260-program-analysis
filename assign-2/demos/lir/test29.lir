test:&() -> int

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _lo3:int, _lo4:int, _lo5:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int
bb1:
  _t12 = $arith sub 0 10
  _t13 = $cmp lt _t12 id1
  $branch _t13 bb5 bb6

bb10:
  _lo4 = $copy 0
  $jump bb9

bb11:
  _lo4 = $copy 1
  $jump bb9

bb12:
  id3 = $copy _lo5
  $ret id4

bb13:
  _lo5 = $copy 0
  $jump bb12

bb14:
  _lo5 = $copy 1
  $jump bb12

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

bb4:
  _t14 = $cmp gt _lo1 _lo2
  id3 = $copy _t14
  _t15 = $arith sub 0 id1
  _lo3 = $copy _t15
  _t16 = $cmp neq _lo3 0
  $branch _t16 bb8 bb7

bb5:
  _lo2 = $copy 0
  $jump bb4

bb6:
  _lo2 = $copy 1
  $jump bb4

bb7:
  $branch _lo3 bb13 bb14

bb8:
  $branch 6 bb10 bb11

bb9:
  _lo3 = $copy _lo4
  $jump bb7

entry:
  _t6 = $arith sub 0 4
  id0 = $copy _t6
  _t7 = $arith sub 0 8
  _t8 = $arith sub 0 _t7
  id2 = $copy _t8
  _t9 = $arith sub 0 2
  id3 = $copy _t9
  id4 = $copy id1
  _t10 = $arith sub 0 7
  _t11 = $arith sub 0 _t10
  id0 = $copy _t11
  id1 = $copy id2
  $branch 7 bb2 bb3
}
