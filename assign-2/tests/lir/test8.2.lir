f1:&(int) -> int
f2:&(int, &int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(&int) -> int

fn f1(p:int) -> int {
entry:
  $ret 0
}

fn f2(p:int, q:&int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:&&int, _t15:&int, _t16:int, _t17:int, _t18:int, _t19:int, _t20:int, _t21:int, _t22:int, _t23:&int, _t24:int, _t25:&int, _t26:int, _t3:int, _t4:&&int, _t5:&int, _t6:int, _t7:&int, _t8:int, _t9:int, id0:&int, id1:int, id10:&int, id2:&&int, id3:&(int) -> int, id4:&&int, id5:&int, id6:int, id7:int, id8:int, id9:int
bb1:
  $jump bb4



bb17:
  id8 = $copy _t24
  _t26 = $load _t25
  $ret _t26

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

bb4:
  $jump bb6

bb6:
  _t20 = $arith sub 0 id9
  _t21 = $arith sub 0 _t20
  _t22 = $arith sub 0 _t21
  id8 = $copy _t22
  _t23 = $addrof id1
  _t24 = $call_dir f2(3, _t23) then bb17


entry:
  id2 = $copy id2
  _t3 = $arith sub 0 8
  _t5 = $load _t4
  _t6 = $load _t5
  _t8 = $load _t7
  id1 = $copy _t8  // (id1:int, _t8:int) definition used in entry.13
  id3 = $copy id3
  id4 = $copy id2
  _t9 = $arith sub 0 6
  id7 = $copy _t9
  id6 = $copy id7
  _t10 = $load id0 // use entry.5
  $branch _t10 bb2 bb3
}
