f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _lo3:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t19:int, _t20:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int
bb1:
  _t7 = $arith sub _t5 _t6
  id4 = $copy _t7
  _t8 = $arith sub 0 8
  $branch _t8 bb3 bb4

bb10:
  _t11 = $call_dir f1() then bb11

bb11:
  id1 = $copy _t11
  _t12 = $arith sub 0 id3
  $branch _t12 bb13 bb14

bb12:
  _t13 = $arith sub 5 id2
  _t14 = $arith sub _t13 _lo2
  id2 = $copy _t14
  _t15 = $call_dir test() then bb15

bb13:
  _lo2 = $copy 0
  $jump bb12

bb14:
  _lo2 = $copy 1
  $jump bb12

bb15:
  _t16 = $call_ext e2(_t15)
  id2 = $copy _t16
  $jump bb9

bb16:
  $jump bb5

bb17:
  _t17 = $arith sub 0 _lo3
  id4 = $copy _t17
  _t18 = $arith sub 0 9
  id4 = $copy _t18
  _t19 = $call_ext e1()
  _t20 = $arith sub 0 _t19
  $ret _t20

bb18:
  _lo3 = $copy 0
  $jump bb17

bb19:
  _lo3 = $copy 1
  $jump bb17

bb2:
  id0 = $copy _lo1
  $jump bb5

bb3:
  _lo1 = $copy 0
  $jump bb2

bb4:
  _lo1 = $copy 1
  $jump bb2

bb5:
  _t9 = $arith sub 0 4
  $branch _t9 bb6 bb7

bb6:
  _t10 = $call_dir f1() then bb8

bb7:
  id1 = $copy id2
  $branch id4 bb18 bb19

bb8:
  $branch _t10 bb10 bb9

bb9:
  id4 = $copy id2
  $call_dir f1() then bb16

entry:
  _t4 = $arith sub 0 id2
  id2 = $copy _t4
  _t5 = $call_ext e2(3)
  _t6 = $call_dir f1() then bb1
}
