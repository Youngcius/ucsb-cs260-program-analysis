test:&() -> int

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _lo3:int, _lo4:int, _lo5:int, _lo6:int, _ret28:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t19:int, _t20:int, _t21:int, _t22:int, _t23:int, _t24:int, _t25:int, _t26:int, _t27:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int
bb1:
  _t10 = $cmp gte id0 _lo1 // mismatch in this line
  id4 = $copy _t10
  id3 = $copy id4
  _t11 = $arith sub 0 5
  _t12 = $cmp eq _t11 2
  _t13 = $arith sub 0 id0
  _t14 = $cmp lte _t12 _t13
  id0 = $copy _t14 // should not including this pp
  $branch 2 bb7 bb8

bb2:
  _t9 = $arith sub 0 2
  $branch _t9 bb4 bb5

bb3:
  _lo1 = $copy _lo2
  $jump bb1

bb4:
  _lo2 = $copy 0
  $jump bb3

bb5:
  _lo2 = $copy 1
  $jump bb3

bb7:
  $jump exit

bb8:
  _t17 = $arith sub 0 id1
  _lo3 = $copy _t17
  _t18 = $cmp eq _lo3 0
  $jump exit

entry:
  id1 = $copy id0
  id2 = $copy id0
  _t7 = $arith sub 0 5
  _lo1 = $copy _t7
  _t8 = $cmp neq _lo1 0
  $branch _t8 bb2 bb1

exit:
  $ret _ret28
}
