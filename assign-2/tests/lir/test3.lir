f1:&() -> int
f2:&(int, int) -> int
g1:int
g2:int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int
bb1:
  _t11 = $call_ext e1()
  _t12 = $cmp lte _t11 10
  g2 = $copy _t12
  _t13 = $arith sub 0 3
  id1 = $copy _t13
  g1 = $copy 6
  _t14 = $arith sub 0 6
  $ret _t14

bb10:
  _lo1 = $copy 1
  $jump bb8

bb11:
  _t10 = $arith sub 0 g1
  id0 = $copy _t10
  $jump bb1

bb12:
  $branch g2 bb14 bb15

bb13:
  _t9 = $arith sub 0 _lo2
  g2 = $copy _t9
  $jump bb11

bb14:
  _lo2 = $copy 0
  $jump bb13

bb15:
  _lo2 = $copy 1
  $jump bb13

bb2:
  $jump bb4

bb3:
  _t7 = $call_dir f2(id2, id1) then bb7

bb4:
  $branch 7 bb5 bb6

bb5:
  $jump bb4

bb6:
  _t4 = $cmp gt id0 id1
  g1 = $copy _t4
  id0 = $copy g1
  _t5 = $call_ext e2(id1)
  id2 = $copy _t5
  _t6 = $arith sub 0 9
  $call_ext e2(_t6)
  $jump bb1

bb7:
  $branch _t7 bb9 bb10

bb8:
  id0 = $copy _lo1
  g1 = $copy 9
  _t8 = $arith sub 0 2
  $branch _t8 bb12 bb11

bb9:
  _lo1 = $copy 0
  $jump bb8

entry:
  id1 = $copy 6
  g2 = $copy id0
  _t3 = $call_ext e2(g2)
  $branch _t3 bb2 bb3
}
